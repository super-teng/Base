<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
       <!--配置注解自动扫描的包 这个使我们的spring - context包中的用于构建容器的包 -->
       <context:component-scan base-package="annotation"/>
       <context:component-scan base-package="aop"/>
       <context:component-scan base-package="transaction"/>
       <!--配置aop开启aspectJ的注解形式处理-->
       <aop:aspectj-autoproxy />
       <!--加载配置xml配置文件 -->
       <context:property-placeholder location="jdbc.properties"/>
       <!--配置数据源连接mysql dbcp的方式 这样我们就和mysql数据库进行了交互-->
       <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
              <property name="driverClassName" value="${driverClassName}"/>
              <property name="url" value="${url}"/>
              <property name="username" value="${username}"/>
              <property name="password" value="${password}"/>
       </bean>
       <!--配置事务管理器 我们的事务管理器需要去管理我们的具体连接中的信息而连接在数据源中所以我们需要引用数据源 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"/>
       </bean>
       <!--开启我们的事务管理器注解的方式进行处理 -->
       <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>